#!/groovy
@Library('cx-jenkins-pipeline-kit') _

def workspace
def cxCommonVersion = "${BUILD_TAG}"
def vmName = "${BUILD_TAG}-CxSAST"
def vmTemplate89 = "CxSDLC-Template-CxSAST-8-9"
def ipAddress89
def vmTemplate90 = "CxSDLC-Template-CxSAST-9-0"
def ipAddress90
def vmTemplate92 = "CxSDLC-Template-CxSAST-9-2"
def ipAddress92
def ram = "12000"
def cpu = "4"
def provider = "VMWARE"
def decommissionPeriod = "1 hour"
def vmwareNetwork = "Lab"
def automationBranch = "9.0.0"

pipeline {
    parameters {
        string(name: "vmTemplate89",defaultValue: "${vmTemplate89}", description: "Template for 8.9 VM")
        string(name: "vmTemplate90",defaultValue: "${vmTemplate90}", description: "Template for 9.0 VM")
        string(name: "vmTemplate92",defaultValue: "${vmTemplate92}", description: "Template for 9.2 VM")
        string(name: "ram",defaultValue: "${ram}", description: "Server memory")
        string(name: "cpu",defaultValue: "${cpu}", description: "")
        string(name: "provider",defaultValue: "${provider}", description: "IAAS platform to be used")
        string(name: "decommissionPeriod",defaultValue: "${decommissionPeriod}", description: "Decommission period")
        string(name: "vmwareNetwork",defaultValue: "${vmwareNetwork}", description: "vmware network for new VMs")
        choice(name: 'automationBranch', choices: ['9.0.0', 'cd-add-resources'], description: 'automation branch')
    }
    agent { node { label 'CxSDLC-Slave' } }
    options {
        timestamps()
        timeout(time: 2, unit: 'HOURS')
        //skipDefaultCheckout()
    }
    stages {

        stage('Pipeline Info') {
            steps {
                script {
                    if (BRANCH_NAME == 'master') {
                        // remove -SNAPSHOT if exist (temporary)
                        sh "sed -e 's/-SNAPSHOT//g' -i ./pom.xml"
                        // get version from POM
                        sh "mvn resources:resources"
                        def commonPropertiesContent = readFile "./target/classes/common.properties"
                        cxCommonVersion = commonPropertiesContent.substring(10)
                    }
                    workspace = pwd()
                    sh 'printenv'
                }
            }
        }

        stage('Build CxCommon') {
            steps {
                script {
                    sh "docker run --rm --name build-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-common -w /usr/src/cx-common maven:3.6.1-jdk-8-alpine mvn clean install -DskipTests -Dcxcommon.version=${cxCommonVersion}"
                }
            }
        }

        stage('UT-IT & Sonar') {
            parallel {

                stage('Run Unit & Integration Tests') {
                    steps {
                        script {
                            sh "docker run --rm --name test-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-common -w /usr/src/cx-common maven:3.6.1-jdk-8-alpine mvn test -Dcxcommon.version=${cxCommonVersion}"
                        }
                    }
                }

                stage('Run Code Quality') {
                    steps {
                        script {
                            sh "docker run --rm --name sonar-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-common -w /usr/src/cx-common maven:3.6.1-jdk-8-alpine mvn sonar:sonar -Dcxcommon.version=${cxCommonVersion}"
                        }
                    }
                }
            }
        }

        stage('System Tests') {
            when {
                expression {
                    BRANCH_NAME == 'master' //|| BRANCH_NAME.startsWith("PR-") && CHANGE_TARGET == 'master'
                }
            }
            parallel {

                stage('8.9') {
                    stages {
                        stage('Create VM') {
                            steps {
                                script {
                                    kit.Create_Vm_Terraform(vmName + "-8.9", vmTemplate89, ram, cpu, provider, decommissionPeriod, "Auto", "Dynamic-CI", vmwareNetwork)
                                    ipAddress89 = kit.getIpAddress(vmName + "-8.9", provider)
                                    echo "ipAddress89 = ${ipAddress89}"
                                }
                            }
                        }
                        stage('Pull Automation Code') {
                            steps {
                                dir("${workspace}/8.9/Checkmarx-System-Test") {
                                    git branch: automationBranch, credentialsId: '15f8e7b7-6ce7-44c0-b151-84f99ffa7aed', poll: false, url: 'http://tfs2013:8080/tfs/DefaultCollection/Automation/_git/Checkmarx-System-Test'
                                    sh "cp -r ../../../env ."
                                    sh "sed -e 's/<CxSastIpAddress>/${ipAddress89}/g' -i ./env/topology.xml"
                                }
                            }
                        }
                        stage('Plugins API Sanity Test') {
                            steps {
                                dir("${workspace}/8.9/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-api-sanity-test-8.9-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/8.9/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q clean test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.sanity.* -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                        stage('Plugins API Smoke Tests') {
                            steps {
                                dir("${workspace}/8.9/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-api-smoke-tests-8.9-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/8.9/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.PluginsCxSASTSmokeTests,com.cx.automation.plugin.test.cxcommonclient.PluginsCxMandOAndOSASmokeTests \
                                            -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                        stage('Plugins CxCommonClient All Tests') {
                            steps {
                                dir("${workspace}/8.9/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-cxcommonclient-all-tests-8.9-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/8.9/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.scan.*,com.cx.automation.plugin.test.cxcommonclient.osa.* \
                                            -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                    }
                    post {
                        always {
                            script {
                                dir("${workspace}/8.9/Checkmarx-System-Test") {
                                    junit '**/PluginsCommonClient/target/surefire-reports/**/*.xml'
                                }
                                if (ipAddress89 != null) {
                                    deleteVm(provider, ipAddress89, vmName + "-8.9")
                                }
                            }
                        }
                    }
                }

                stage('9.0') {
                    stages {
                        stage('Create VM') {
                            steps {
                                script {
                                    kit.Create_Vm_Terraform(vmName + "-9.0", vmTemplate90, ram, cpu, provider, decommissionPeriod, "Auto", "Dynamic-CI", vmwareNetwork)
                                    ipAddress90 = kit.getIpAddress(vmName + "-9.0", provider)
                                    echo "ipAddress90 = ${ipAddress90}"
                                }
                            }
                        }
                        stage('Pull Automation Code') {
                            steps {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    git branch: automationBranch, credentialsId: '15f8e7b7-6ce7-44c0-b151-84f99ffa7aed', poll: false, url: 'http://tfs2013:8080/tfs/DefaultCollection/Automation/_git/Checkmarx-System-Test'
                                    sh "cp -r ../../../env ."
                                    sh "sed -e 's/<CxSastIpAddress>/${ipAddress90}/g' -i ./env/topology.xml"
                                }
                            }
                        }
                        stage('Plugins API Sanity Test') {
                            steps {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-api-sanity-test-9.0-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.0/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q clean test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.sanity.* -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                        stage('Plugins API Smoke Tests') {
                            steps {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-api-smoke-tests-9.0-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.0/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.PluginsCxSASTSmokeTests,com.cx.automation.plugin.test.cxcommonclient.PluginsCxMandOAndOSASmokeTests \
                                            -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                        stage('Plugins CxCommonClient All Tests') {
                            steps {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-cxcommonclient-all-tests-9.0-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.0/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.scan.*,com.cx.automation.plugin.test.cxcommonclient.osa.* \
                                            -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                    }
                    post {
                        always {
                            script {
                                dir("${workspace}/9.0/Checkmarx-System-Test") {
                                    junit '**/PluginsCommonClient/target/surefire-reports/**/*.xml'
                                }
                                if (ipAddress90 != null) {
                                    deleteVm(provider, ipAddress90, vmName + "-9.0")
                                }
                            }
                        }
                    }
                }

                stage('9.2') {
                    stages {
                        stage('Create VM') {
                            steps {
                                script {
                                    kit.Create_Vm_Terraform(vmName + "-9.2", vmTemplate92, ram, cpu, provider, decommissionPeriod, "Auto", "Dynamic-CI", vmwareNetwork)
                                    ipAddress92 = kit.getIpAddress(vmName + "-9.2", provider)
                                    echo "ipAddress92 = ${ipAddress92}"
                                }
                            }
                        }
                        stage('Pull Automation Code') {
                            steps {
                                dir("${workspace}/9.2/Checkmarx-System-Test") {
                                    git branch: automationBranch, credentialsId: '15f8e7b7-6ce7-44c0-b151-84f99ffa7aed', poll: false, url: 'http://tfs2013:8080/tfs/DefaultCollection/Automation/_git/Checkmarx-System-Test'
                                    sh "cp -r ../../../env ."
                                    sh "sed -e 's/<CxSastIpAddress>/${ipAddress92}/g' -i ./env/topology.xml"
                                }
                            }
                        }
                        stage('Plugins API Sanity Test') {
                            steps {
                                dir("${workspace}/9.2/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-api-sanity-test-9.2-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.2/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q clean test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.sanity.* -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                        stage('Plugins API Smoke Tests') {
                            steps {
                                dir("${workspace}/9.2/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-api-smoke-tests-9.2-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.2/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.PluginsCxSASTSmokeTests,com.cx.automation.plugin.test.cxcommonclient.PluginsCxMandOAndOSASmokeTests \
                                            -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                        stage('Plugins CxCommonClient All Tests') {
                            steps {
                                dir("${workspace}/9.2/Checkmarx-System-Test") {
                                    //todo: cancel ignore tests failures (maven.test.failure.ignore)
                                    sh "docker run --rm --name plugins-cxcommonclient-all-tests-9.2-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/9.2/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                                        mvn -q test -Dcxcommon.version=${cxCommonVersion} -Dtest=com.cx.automation.plugin.test.cxcommonclient.scan.*,com.cx.automation.plugin.test.cxcommonclient.osa.* \
                                            -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                                }
                            }
                        }
                    }
                    post {
                        always {
                            script {
                                dir("${workspace}/9.2/Checkmarx-System-Test") {
                                    junit '**/PluginsCommonClient/target/surefire-reports/**/*.xml'
                                }
                                if (ipAddress92 != null) {
                                    deleteVm(provider, ipAddress92, vmName + "-9.2")
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Publish') {
            when {
                expression {
                    BRANCH_NAME == 'master'
                }
            }
            parallel {

                stage('GitHub Release') {
                    environment {
                        GITHUB_TOKEN = credentials('github-cxflowtestuser')
                    }
                    steps {
                        script {
                            sh "ghr -t ${GITHUB_TOKEN} -u checkmarx-ltd -n ${cxCommonVersion} -r Cx-Client-Common -c ${GIT_PREVIOUS_COMMIT} -delete ${cxCommonVersion} ./target/cx-client-common-${cxCommonVersion}.jar"
                        }
                    }
                }

                stage('Maven Central') {
                    steps {
                        script {
                            //sh "docker run --rm --name publish-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-common -v /root/.gnupg:/root/.gnupg -w /usr/src/cx-common maven:3.6.1-jdk-8 mvn deploy -P release"
                            sh "mvn deploy -P release -DskipTests -Dcxcommon.version=${cxCommonVersion}"
                        }
                    }
                }
            }
        }
    }

    post {
        cleanup {
            script{
                cleanWs()
            }
        }
    }
}